name: Publish production image to GHCR (camap-hx)

on:
  push:
    tags:
      - 'v[0-9]*.[0-9]*.[0-9]*'      # déclenche UNIQUEMENT sur un tag vX.Y.Z
  workflow_dispatch:                 # exécution manuelle

permissions:
  contents: read
  packages: write

# Empêche deux builds simultanés sur le même tag
concurrency:
  group: prod-${{ github.ref }}
  cancel-in-progress: true

jobs:
  verify-prod:
    name: Verify tag is vX.Y.Z from master
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Validate tag format vX.Y.Z
        id: tag
        run: |
          ref="${GITHUB_REF##*/}"
          echo "ref_name=$ref" >> $GITHUB_OUTPUT

          if [[ ! "$ref" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Tag non conforme (attendu: vX.Y.Z), reçu: $ref"
            exit 1
          fi

          echo "✅ Tag conforme : $ref"

      - name: Ensure tag commit is contained in origin/master
        run: |
          git fetch origin +refs/heads/master:refs/remotes/origin/master

          if ! git branch --remotes --contains HEAD | grep -q 'origin/master'; then
            echo "❌ Ce tag n'est pas créé depuis un commit présent dans origin/master."
            exit 1
          fi

          echo "✅ Le tag pointe bien sur origin/master"

  build-and-push:
    name: Build & push camap-hx (prod)
    needs: verify-prod
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ghcr.io/camap-app/camap-hx

    steps:
      - uses: actions/checkout@v4

      - name: Extract versions
        id: ver
        shell: bash
        run: |
          tag="${GITHUB_REF##*/}"
          semver="${tag#v}"

          major="${semver%%.*}"
          minor_patch="${semver#${major}.}"
          minor="${minor_patch%%.*}"
          major_minor="${major}.${minor}"

          echo "tag=$tag"           >> $GITHUB_OUTPUT
          echo "semver=$semver"     >> $GITHUB_OUTPUT
          echo "major=$major"       >> $GITHUB_OUTPUT
          echo "major_minor=$major_minor" >> $GITHUB_OUTPUT

      # Multi-arch prerequisites
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # --- Build multi-arch (ARM64 peut échouer si mod-neko indisponible) ---
      - name: Build & push (try multi-arch)
        id: build_multi
        continue-on-error: true
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./camap-hx.Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          provenance: false
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.ver.outputs.tag }}
            ${{ env.IMAGE_NAME }}:${{ steps.ver.outputs.major_minor }}
            ${{ env.IMAGE_NAME }}:${{ steps.ver.outputs.major }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha,scope=camap-hx
          cache-to:   type=gha,scope=camap-hx,mode=max

      # --- En cas d’échec ARM64, fallback amd64-only ---
      - name: Build & push (fallback amd64-only)
        if: steps.build_multi.outcome == 'failure'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./camap-hx.Dockerfile
          push: true
          platforms: linux/amd64
          provenance: false
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.ver.outputs.tag }}
            ${{ env.IMAGE_NAME }}:${{ steps.ver.outputs.major_minor }}
            ${{ env.IMAGE_NAME }}:${{ steps.ver.outputs.major }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha,scope=camap-hx
          cache-to:   type=gha,scope=camap-hx,mode=max
