name: Publish production image to GHCR (camap-ts)

on:
  push:
    branches: [ "master" ]
    # On capture tous les v* ici (glob), puis on filtre strictement plus bas.
    tags: [ 'v*' ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  verify-prod:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Extract tag and validate semver vX.Y.Z
        id: tag
        shell: bash
        run: |
          ref="${GITHUB_REF##*/}"        # ex: v2.0.8, v2.0.8-rc1, etc.
          echo "ref_name=$ref" >> $GITHUB_OUTPUT
          if [[ ! "$ref" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Tag non conforme (attendu: vX.Y.Z), reçu: $ref"
            exit 1
          fi
          echo "✅ Tag conforme: $ref"

      - name: Ensure tag commit is contained in origin/master
        shell: bash
        run: |
          git fetch origin +refs/heads/master:refs/remotes/origin/master
          if ! git branch --remotes --contains HEAD | grep -q 'origin/master'; then
            echo "❌ Ce tag n'est pas créé depuis la branche master."
            exit 1
          fi
          echo "✅ Tag créé depuis un commit présent dans origin/master"

  build-and-push:
    needs: verify-prod
    # Ceinture-bretelles : n’exécute vraiment que pour des tags vX.Y.Z sans suffixe
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ghcr.io/camap-app/camap-ts
    steps:
      - uses: actions/checkout@v4

      - name: Extract versions
        id: ver
        shell: bash
        run: |
          tag="${GITHUB_REF##*/}"
          semver="${tag#v}"
          major="${semver%%.*}"
          minor_patch="${semver#${major}.}"
          minor="${minor_patch%%.*}"
          major_minor="${major}.${minor}"
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "semver=$semver" >> $GITHUB_OUTPUT
          echo "major=$major" >> $GITHUB_OUTPUT
          echo "major_minor=$major_minor" >> $GITHUB_OUTPUT
          echo "▶ tag=$tag semver=$semver major=$major major_minor=$major_minor"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug workspace
        run: |
          pwd
          echo "---- root ----"
          ls -la
          echo "---- expected paths ----"
          ls -la packages || true
          ls -la public   || true
          ls -la scripts  || true
          ls -la package.json package-lock.json || true
          echo "---- .dockerignore ----"
          [ -f .dockerignore ] && sed -n '1,200p' .dockerignore || echo "(absent)"

      - name: Build & push (prod)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./camap-ts.Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.ver.outputs.tag }}
            ${{ env.IMAGE_NAME }}:${{ steps.ver.outputs.major_minor }}
            ${{ env.IMAGE_NAME }}:${{ steps.ver.outputs.major }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
