name: Publish staging image to GHCR (camap-ts)

on:
  push:
    tags:
      - 'staging-v*'
      - 'staging-*'

permissions:
  contents: read
  packages: write

jobs:
  verify-staging:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Ensure HEAD is contained in origin/staging
        run: |
          git fetch origin +refs/heads/staging:refs/remotes/origin/staging
          if ! git branch --remotes --contains HEAD | grep -q 'origin/staging'; then
            echo "❌ Ce tag n'est pas créé depuis la branche staging." >&2
            exit 1
          fi

  build-and-push:
    needs: verify-staging
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ghcr.io/<OWNER>/camap-ts
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from tag
        id: ver
        run: |
          ref="${GITHUB_REF##*/}"
          echo "tag=$ref" >> $GITHUB_OUTPUT
          echo "short=${ref#staging-}" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          # file: ./Dockerfile  # adapte si besoin
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.ver.outputs.tag }}
            ${{ env.IMAGE_NAME }}:${{ steps.ver.outputs.short }}
            ${{ env.IMAGE_NAME }}:staging
          cache-from: type=gha
          cache-to: type=gha,mode=max
